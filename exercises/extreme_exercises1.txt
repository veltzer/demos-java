Extreme Java Exercises
======================
01 Multi Threading
==================
Readers/Writer lock exercise
----------------------------
Write an object with the following interface:
	o.read() - reader request. blocks if there is a writer
	o.readLeave() - reader has left the building.
	o.write() - writer request. blocks if there are readers.
	o.writeLeave() - writer has left the building.
This object is NOT a thread! It is a synchronization object
to be used by threads as a means to control the access to a
shared resource (whatever that resource is).
A reader thread will use the object thus:
	class ReaderThread extends Thread {
		public void run() {
			try {
				thelock.read();
				// read the resource
			} finally {
				thelock.readLeave();
			}
		}
	}
A writer thread will do something similar for writing to the
resource.
Use wait, notifyAll/notify, synchronized
The object should know how to report how many readers/writers are
inside and how many are waiting.

Blocking queue exercise
-----------------------
Write a queue which can be accessed by multiple threads. Any thread may put objects on the queue and will not block. A synchronization mechanim will make sure that threads getting objects from the queue will not get mixed up. When a thread tries to get an object from the queue and the queue is empty it will be put to sleep and a 'put' operation on the queue will wake it up. Do not worry about fairness.

Semaphore exercise
------------------
Write a class which has a constructor which receives a number. The number represents an amount of resources. Any thread will now use the class like this:
	sem.down(N)
	// do something with N resources
	sem.up(N)
The threads are all co-operative (they will use the same N in ->down and ->up...).

Semaphore based naiive read/write lock
--------------------------------------
Use the semaphone that you wrote in order to implement a naiive
reader/writer lock. How would a writer make sure that all readers
are not there ?

Fixed-Executor exercise
-----------------------
Write a class based on a Blocking Queue (use the Java Blocking Queue
class) that has a fixed number of threads set at creation time. Each
thread is in a never ending loop trying to get a Runnable from the
queue and running it after he got it. This exercise simulates a real
multi-threaded server which picks up jobs to do off a blocking queue.
A variation could be that the blocking queue contains data to be
processed and the executor runs the same processing code in a thread
over the data element. The second variation could be easily built
on top of the first one. Also notice that the java.util.concurrent
has an implementation of this fixed executor.

02 Java IO
==========
Buffer/Channel nio exercise
---------------------------
Write a file splitter. The usage on the cmd line will be
java split [filein] [size] [fileout1] [fileout2]
The program will split the in file to fileout1 and fileout2
which are new files which will be written.
size(fileout1)+size(fileout2)=size(filein).
The split will be done according to size. First block of size 'size'
of filein will go to fileout1, second to fileout2 etc...
Use channels and buffers.

03 Memory Management
====================
Reference objects and GC
------------------------
write a provider/listener mechanism, such that when a listener is no longer in use (by its creator), it is also automatically discarded by the
provider (solution using WeakReference). Use a list container.

04 Reflection
=============
MethodInvoker exercise
----------------------
Write a method which accepts an object, a general property name, a property value, and by reflection sets the value on that object using a proper setter method.
Demostrate the use using a demo class and instance.

Proxy exercise
--------------
Dynamic proxy exercise:

part A
======
Write a method like Collections.synchronize. The method accepts an object
of an unknown type and returns a proxy to that object. The input object is
assumed to be non synchronized and the output object is a proxy which *is*
synchronized using a single lock on all the methods.

part B
======
Write a "Read Only" proxy. Throw an IllegalAccessException on any attempt
to call a method by name "set*" on the target object and allow any call
on methods called "get*".

05 Collections
==============
Iterator exercise
-----------------
given a (hard coded) long string of text, parse it into words
(provide a RegEx which does that). Output the following:
a. The number of times each word appears in the text
b. All the words in the text, by alphabetical order, no repetitions.
c. All the words in the text, by string-length order, no repetitions.
Case sensitivity is not an issue.
Implement the Iterator<String> interface. The use of your interface
should be:
// s is a long string of many words
for (Iterator<String> i = new WordsIterator(s); i.hasNext();) {
	String word = i.next();
	// do something with word
}

Iterable exercise
-----------------
Same exercise as the Iterator but now make sure that you can
use your words splitter this way:
for(String s: words) {
}
In order to do that you need to implement the Iterable<String>
interface. Modify your code from the previous exercise to fit
the new pattern.

06 Optimization
===============
[currently no exercises]
