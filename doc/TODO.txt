Examples to build:
=================
- https://www.journaldev.com/861/java-copy-file
- http://b010.blogspot.com/2009/05/speed-comparison-of-1-javas-built-in.html


Now:
====
- build the three or four project which yet dont build
	and remove them from the ant 'build.xml' exclusion list (yes, there is such a thing).
- do a parser to checkstyle output which removes it's annoying prints.
- get to full clean build of this project.
- order the txt files in every project folder (exercises, tests and more).
	set standards and so forth.
- get ridd of the static jars in the static folder.
	we can do that by:
	- bringing them from ivy
	- bringing them from maven
	- putting them in the ivy local cache
	- putting them in the maven local cache
	- getting them from ubuntu packages.
	what ever, as long as they will no longer be source files.
- get ridd of the .perl and .sh scripts I have in the scripts folder
	settle on python for all scripting.
- separate the Standard project into parts:
	advanced (formerly extreme)
	swing
	spring
	basic (formerly programming)
	groovy
	- each with it's own exercises, tests and examples.

Build system:
=============
- make a script that generates the eclipse variable which
	is then used by all the eclipse projects.
- get to ant build again (this time with deprecation).
- add a script to suppress the verbose info coming out of
	the checkstyle.
- run eclipse-jee and:
	- make sure everything builds
	- make sure that all projects have an src folder (even web ones).
- see that all projects build from the command line (all lint with warnings).
- separate the java project as a lean and mean project on it's own.
- get ridd of deprecated APIs so that ant build with be with deprecation true.
- get ridd of the jars in '/static' and use the ones from the OS
	to reduce the size of this project.
	If I'm not happy with that then use maven to bring the jars
	to ~/.m2.

Extreme:
========
- do an example of the TransferTo method for zero copy like in:
	https://www.ibm.com/developerworks/linux/library/j-zerocopy/
- do an example doing strace on a running java process that takes and releases
	locks. Show that it uses futexes?!?
- add an example showing how long it takes to take locks in java.
	compare that to atomics.
- do example of memory access reordering in Java.

Swing:
======
- how do dialogs work (with thread ids).
	Show how does dialog.show() works (and how does it continue as if
	on the same thread).
- showing all threads of a java JVM with a tree model.
- disks full application with custom cell renderer.
	(I already have the begining of this).
